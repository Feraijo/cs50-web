Необходимо разработать проект на Django с двумя приложениями внутри.
Первое приложение:
    Дана модель Human:
    - avatar
    - first_name
    - second_name
    - age
    - gender
    Для этого приложения необходимо реализовать следующие запросы:
    - POST /api/human/ - Создание и сохранение модели
    - GET /api/human/ - Получение всех сущностей (плюсом будет пагинация)
    - GET /api/human/<id> - Получение сущности по ID
    - PUT /api/human/<id> - Изменение сущности по ID
    - DELETE /api/human/<id> - Удаление сущности по ID
Второе приложение:
    Дана модель Match:
    - first_name
    - second_name
    - age
    - gender
    Необходимо после создания Human в первом приложении создать ему пару Match во втором. 
    Для заполнения данных можно использовать любые данные(напр. библиотеку Faker).
    Для данного приложения нужны следующие запросы:
    - GET /api/match/<human:id> - получение пары по ID сущности из первого приложения
    - GET /api/match/ - список Match с вложеным Human (плюсом будет пагинация).


Все запросы должны возвращать правильные коды ответов, (200, 204, 500, и т.д.), 
работать в основном с JSON(исключение - метод создания Human, там необходим тип 
запроса multipart/form-data для отправки изображения).
Приветствуется конфигурируемость из settings.py
Необходимо написать 2 независимых приложения (которые не знают друг о друге)
И выстроить взаимосвязь через протокол

_____


Необходимо создать небольшое веб приложение - "Хранилище фотографий", 
используя любой веб фреймворк (желательно тот, который Вы лучше всего знаете).
Необходимые элементы на фронте — форма загрузки фотографии и таблица со списком 
загруженных фото. Авторизация не обязательна.

Форма загрузки:
Текстовое поле для ввода названия фото
Выбор файла

Таблица:
Превью фото (необходимо сделать уменьшенную копию фото (миниатюру); 
также данное превью должно являться ссылкой на оригинальное/полное изображение, 
которое открывается по клику на превью)
Название фото (которое пользователь указывает при загрузке)
Производитель и модель камеры (из EXIF, если присутствует)
Размер файла
Дата создания фото (из EXIF)
Дата загрузки фото
Кнопка удаления

Требования:
Не сохранять уже существующие фото. При наличии дубликата содержимого файла 
- выдавать ошибку.
Проверять, является ли загружаемый файл изображением, если нет — выдавать ошибку.